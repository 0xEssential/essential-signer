/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SignedOwnershipProof,
  SignedOwnershipProofInterface,
} from "../SignedOwnershipProof";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "authorizer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nftChainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "createMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ownershipSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "authorizer",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nftTokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nftChainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "targetChainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IForwardRequest.ERC721ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "verifyOwnershipProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061095f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806312ce42fd146100465780635c0dfff6146100735780638190256414610106575b600080fd5b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f8610081366004610693565b6040805173ffffffffffffffffffffffffffffffffffffffff98891660208083019190915297891681830152606081019690965260808601949094529190951660a084015260c08301949094524660e083015261010080830194909452805180830390940184526101209091019052815191012090565b60405190815260200161006a565b6101196101143660046107ca565b610129565b604051901515815260200161006a565b600061025861013883426108ee565b1061018a5760405162461bcd60e51b815260206004820152600560248201527f5374616c6500000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b83516020808601516101208088015160a0808a01516060808c01516080808e01516040805173ffffffffffffffffffffffffffffffffffffffff9c8d16818d0152998c168a8201529389019690965287019290925296169084015260c08301524660e08301526101008083018790528451808403909101815290820184528051908301207f19457468657265756d205369676e6564204d6573736167653a0a33320000000061014083015261015c808301919091528351808303909101815261017c909101909252815191012060009060005490915073ffffffffffffffffffffffffffffffffffffffff1661028082866102a0565b73ffffffffffffffffffffffffffffffffffffffff161495945050505050565b60008060006102af85856102c4565b915091506102bc81610334565b509392505050565b6000808251604114156102fb5760208301516040840151606085015160001a6102ef87828585610528565b9450945050505061032d565b825160401415610325576020830151604084015161031a868383610622565b93509350505061032d565b506000905060025b9250929050565b600081600481111561034857610348610913565b14156103515750565b600181600481111561036557610365610913565b14156103b35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610181565b60028160048111156103c7576103c7610913565b14156104155760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610181565b600381600481111561042957610429610913565b141561049d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610181565b60048160048111156104b1576104b1610913565b14156105255760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610181565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561055f5750600090506003610619565b8460ff16601b1415801561057757508460ff16601c14155b156105885750600090506004610619565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156105dc573d6000803e3d6000fd5b5050604051601f19015191505073ffffffffffffffffffffffffffffffffffffffff811661061257600060019250925050610619565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b0161065c87828885610528565b935093505050935093915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461068e57600080fd5b919050565b600080600080600080600060e0888a0312156106ae57600080fd5b6106b78861066a565b96506106c56020890161066a565b955060408801359450606088013593506106e16080890161066a565b925060a0880135915060c0880135905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715610737576107376106fd565b60405290565b600082601f83011261074e57600080fd5b813567ffffffffffffffff80821115610769576107696106fd565b604051601f8301601f19908116603f01168101908282118183101715610791576107916106fd565b816040528381528660208588010111156107aa57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156107df57600080fd5b833567ffffffffffffffff808211156107f757600080fd5b90850190610160828803121561080c57600080fd5b610814610713565b61081d8361066a565b815261082b6020840161066a565b602082015261083c6040840161066a565b604082015261084d6060840161066a565b60608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e082015261010080840135818301525061012080840135818301525061014080840135838111156108a657600080fd5b6108b28a82870161073d565b8284015250508095505060208601359150808211156108d057600080fd5b506108dd8682870161073d565b925050604084013590509250925092565b60008282101561090e57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220da45ba0d85ba4e6a9ad739c194d4167342c9fb69f093a9be3c771970b7154af364736f6c63430008090033";

type SignedOwnershipProofConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignedOwnershipProofConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignedOwnershipProof__factory extends ContractFactory {
  constructor(...args: SignedOwnershipProofConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SignedOwnershipProof";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SignedOwnershipProof> {
    return super.deploy(overrides || {}) as Promise<SignedOwnershipProof>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SignedOwnershipProof {
    return super.attach(address) as SignedOwnershipProof;
  }
  connect(signer: Signer): SignedOwnershipProof__factory {
    return super.connect(signer) as SignedOwnershipProof__factory;
  }
  static readonly contractName: "SignedOwnershipProof";
  public readonly contractName: "SignedOwnershipProof";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignedOwnershipProofInterface {
    return new utils.Interface(_abi) as SignedOwnershipProofInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignedOwnershipProof {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SignedOwnershipProof;
  }
}

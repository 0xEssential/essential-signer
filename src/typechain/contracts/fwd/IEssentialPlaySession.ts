/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IForwardRequest {
  export type PlaySessionStruct = {
    authorized: PromiseOrValue<string>;
    expiresAt: PromiseOrValue<BigNumberish>;
  };

  export type PlaySessionStructOutput = [string, BigNumber] & {
    authorized: string;
    expiresAt: BigNumber;
  };
}

export interface IEssentialPlaySessionInterface extends utils.Interface {
  functions: {
    "createSession(address,uint256)": FunctionFragment;
    "getSession(address)": FunctionFragment;
    "verifyAuthorization(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createSession"
      | "getSession"
      | "verifyAuthorization"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSession",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSession",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAuthorization",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSession", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAuthorization",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IEssentialPlaySession extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEssentialPlaySessionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSession(
      authorized: PromiseOrValue<string>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSession(
      authorizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IForwardRequest.PlaySessionStructOutput]>;

    verifyAuthorization(
      authorizer: PromiseOrValue<string>,
      benficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  createSession(
    authorized: PromiseOrValue<string>,
    length: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSession(
    authorizer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IForwardRequest.PlaySessionStructOutput>;

  verifyAuthorization(
    authorizer: PromiseOrValue<string>,
    benficiary: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createSession(
      authorized: PromiseOrValue<string>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getSession(
      authorizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IForwardRequest.PlaySessionStructOutput>;

    verifyAuthorization(
      authorizer: PromiseOrValue<string>,
      benficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    createSession(
      authorized: PromiseOrValue<string>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSession(
      authorizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyAuthorization(
      authorizer: PromiseOrValue<string>,
      benficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSession(
      authorized: PromiseOrValue<string>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSession(
      authorizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyAuthorization(
      authorizer: PromiseOrValue<string>,
      benficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

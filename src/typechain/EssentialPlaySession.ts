/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IForwardRequest {
  export type PlaySessionStruct = {
    authorized: string;
    expiresAt: BigNumberish;
  };

  export type PlaySessionStructOutput = [string, BigNumber] & {
    authorized: string;
    expiresAt: BigNumber;
  };

  export type ERC721ForwardRequestStruct = {
    from: string;
    authorizer: string;
    to: string;
    nftContract: string;
    nftTokenId: BigNumberish;
    nftChainId: BigNumberish;
    targetChainId: BigNumberish;
    value: BigNumberish;
    gas: BigNumberish;
    nonce: BigNumberish;
    data: BytesLike;
  };

  export type ERC721ForwardRequestStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    from: string;
    authorizer: string;
    to: string;
    nftContract: string;
    nftTokenId: BigNumber;
    nftChainId: BigNumber;
    targetChainId: BigNumber;
    value: BigNumber;
    gas: BigNumber;
    nonce: BigNumber;
    data: string;
  };
}

export interface EssentialPlaySessionInterface extends utils.Interface {
  contractName: "EssentialPlaySession";
  functions: {
    "createSession(address,uint256)": FunctionFragment;
    "createSignedSession(address,uint256)": FunctionFragment;
    "getSession(address)": FunctionFragment;
    "invalidateSession()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "permissionlessSessions()": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "verifyAuthorization((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createSession",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSignedSession",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getSession", values: [string]): string;
  encodeFunctionData(
    functionFragment: "invalidateSession",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permissionlessSessions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAuthorization",
    values: [IForwardRequest.ERC721ForwardRequestStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSignedSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSession", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invalidateSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissionlessSessions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAuthorization",
    data: BytesLike
  ): Result;

  events: {
    "Session(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Session"): EventFragment;
}

export type SessionEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; authorized: string; length: BigNumber }
>;

export type SessionEventFilter = TypedEventFilter<SessionEvent>;

export interface EssentialPlaySession extends BaseContract {
  contractName: "EssentialPlaySession";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EssentialPlaySessionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSession(
      authorized: string,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSignedSession(
      authorized: string,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSession(
      authorizer: string,
      overrides?: CallOverrides
    ): Promise<[IForwardRequest.PlaySessionStructOutput]>;

    invalidateSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permissionlessSessions(overrides?: CallOverrides): Promise<[boolean]>;

    setTrustedForwarder(
      trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyAuthorization(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  createSession(
    authorized: string,
    length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSignedSession(
    authorized: string,
    length: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSession(
    authorizer: string,
    overrides?: CallOverrides
  ): Promise<IForwardRequest.PlaySessionStructOutput>;

  invalidateSession(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  permissionlessSessions(overrides?: CallOverrides): Promise<boolean>;

  setTrustedForwarder(
    trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyAuthorization(
    req: IForwardRequest.ERC721ForwardRequestStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createSession(
      authorized: string,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createSignedSession(
      authorized: string,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getSession(
      authorizer: string,
      overrides?: CallOverrides
    ): Promise<IForwardRequest.PlaySessionStructOutput>;

    invalidateSession(overrides?: CallOverrides): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    permissionlessSessions(overrides?: CallOverrides): Promise<boolean>;

    setTrustedForwarder(
      trustedForwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyAuthorization(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Session(address,address,uint256)"(
      owner?: string | null,
      authorized?: string | null,
      length?: BigNumberish | null
    ): SessionEventFilter;
    Session(
      owner?: string | null,
      authorized?: string | null,
      length?: BigNumberish | null
    ): SessionEventFilter;
  };

  estimateGas: {
    createSession(
      authorized: string,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSignedSession(
      authorized: string,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSession(
      authorizer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidateSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permissionlessSessions(overrides?: CallOverrides): Promise<BigNumber>;

    setTrustedForwarder(
      trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyAuthorization(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSession(
      authorized: string,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSignedSession(
      authorized: string,
      length: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSession(
      authorizer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidateSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permissionlessSessions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyAuthorization(
      req: IForwardRequest.ERC721ForwardRequestStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
